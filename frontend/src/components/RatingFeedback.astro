---
import { Star, MessageSquare, Send } from 'lucide-astro';

interface Props {
  reportId?: string;
}

const { reportId } = Astro.props;
---

<div class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg p-6 mt-6" id="rating-feedback">
  <div class="flex items-center space-x-3 mb-4">
    <MessageSquare class="h-6 w-6 text-orange-600" />
    <h4 class="text-lg font-semibold text-gray-900">¬øQu√© te pareci√≥ este reporte?</h4>
  </div>

  <form id="feedback-form" class="space-y-4" data-report-id={reportId}>
    <div class="space-y-2">
      <label class="block text-sm font-medium text-gray-700">Calificaci√≥n</label>
      <div class="flex space-x-1" id="star-rating">
        <button type="button" class="star-btn" data-rating="1">
          <Star class="h-6 w-6 text-gray-300 hover:text-yellow-400 transition-colors" />
        </button>
        <button type="button" class="star-btn" data-rating="2">
          <Star class="h-6 w-6 text-gray-300 hover:text-yellow-400 transition-colors" />
        </button>
        <button type="button" class="star-btn" data-rating="3">
          <Star class="h-6 w-6 text-gray-300 hover:text-yellow-400 transition-colors" />
        </button>
        <button type="button" class="star-btn" data-rating="4">
          <Star class="h-6 w-6 text-gray-300 hover:text-yellow-400 transition-colors" />
        </button>
        <button type="button" class="star-btn" data-rating="5">
          <Star class="h-6 w-6 text-gray-300 hover:text-yellow-400 transition-colors" />
        </button>
      </div>
      <input type="hidden" id="rating-value" name="rating" value="0" />
    </div>

    <div class="space-y-2">
      <label for="feedback-comment" class="block text-sm font-medium text-gray-700">
        Comentarios (opcional)
      </label>
      <textarea
        id="feedback-comment"
        name="comment"
        rows="3"
        placeholder="Cu√©ntanos qu√© te pareci√≥ el reporte y c√≥mo podemos mejorarlo..."
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
      ></textarea>
    </div>

    <div class="flex justify-end">
      <button
        type="submit"
        class="flex items-center space-x-2 bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg transition-colors"
      >
        <Send class="h-4 w-4" />
        <span>Enviar Feedback</span>
      </button>
    </div>
  </form>

  <div id="feedback-success" class="hidden">
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg">
      <div class="flex items-center space-x-2">
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>
        <span class="font-medium">¬°Gracias por tu feedback!</span>
      </div>
      <p class="mt-1 text-sm">Tu opini√≥n nos ayuda a mejorar nuestros reportes.</p>
    </div>
  </div>
</div>

<script>
  const starButtons = document.querySelectorAll('.star-btn');
  const ratingInput = document.getElementById('rating-value') as HTMLInputElement;
  const feedbackForm = document.getElementById('feedback-form');
  const successDiv = document.getElementById('feedback-success');
  let currentRating = 0;

  // Star rating functionality
  starButtons.forEach((button, index) => {
    const star = button.querySelector('svg');

    button.addEventListener('click', () => {
      currentRating = index + 1;
      if (ratingInput) {
        ratingInput.value = currentRating.toString();
      }
      updateStars();
    });

    button.addEventListener('mouseenter', () => {
      highlightStars(index + 1);
    });
  });

  const starContainer = document.getElementById('star-rating');
  if (starContainer) {
    starContainer.addEventListener('mouseleave', () => {
      updateStars();
    });
  }

  function updateStars() {
    starButtons.forEach((button, index) => {
      const star = button.querySelector('svg');
      if (star) {
        if (index < currentRating) {
          star.classList.remove('text-gray-300');
          star.classList.add('text-yellow-400');
          star.innerHTML = '<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>';
        } else {
          star.classList.remove('text-yellow-400');
          star.classList.add('text-gray-300');
          star.innerHTML = '<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>';
        }
      }
    });
  }

  function highlightStars(rating: number) {
    starButtons.forEach((button, index) => {
      const star = button.querySelector('svg');
      if (star) {
        if (index < rating) {
          star.classList.remove('text-gray-300');
          star.classList.add('text-yellow-400');
        } else {
          star.classList.remove('text-yellow-400');
          star.classList.add('text-gray-300');
        }
      }
    });
  }

  // Form submission
  if (feedbackForm) {
    feedbackForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      if (currentRating === 0) {
        alert('Por favor selecciona una calificaci√≥n');
        return;
      }

      const formData = new FormData(feedbackForm as HTMLFormElement);
      const comment = formData.get('comment') as string;

      // Obtener el reportId de la URL o del atributo data
      const reportId = (feedbackForm as HTMLFormElement).dataset.reportId || getReportIdFromURL();

      console.log('üîç Debug - reportId obtenido:', reportId);
      console.log('üîç Debug - dataset.reportId:', (feedbackForm as HTMLFormElement).dataset.reportId);
      console.log('üîç Debug - URL actual:', window.location.href);

      if (!reportId) {
        alert('Error: No se pudo identificar el reporte. Revisa la consola (F12) para m√°s detalles.');
        console.error('‚ùå No se encontr√≥ reportId');
        return;
      }

      // Enviar feedback al backend
      try {
        const url = `http://localhost:3000/api/reports/${reportId}/feedback`;
        console.log('üì§ Enviando feedback a:', url);
        console.log('üì§ Datos:', { rating: currentRating, comment: comment || undefined });

        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            rating: currentRating,
            comment: comment || undefined,
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || 'Error al enviar feedback');
        }

        const result = await response.json();
        console.log('‚úÖ Feedback enviado:', result);

        // Mostrar mensaje de √©xito
        if (feedbackForm && successDiv) {
          feedbackForm.classList.add('hidden');
          successDiv.classList.remove('hidden');
        }
      } catch (error) {
        console.error('‚ùå Error al enviar feedback:', error);
        alert('Hubo un error al enviar tu feedback. Por favor intenta de nuevo.');
      }
    });
  }

  // Funci√≥n para obtener el reportId de la URL
  function getReportIdFromURL(): string | null {
    // Opci√≥n 1: De la URL como par√°metro ?reportId=xxx
    const urlParams = new URLSearchParams(window.location.search);
    const reportIdParam = urlParams.get('reportId');
    if (reportIdParam) return reportIdParam;

    // Opci√≥n 2: Del pathname /report/xxx
    const pathMatch = window.location.pathname.match(/\/report\/([a-f0-9-]+)/i);
    if (pathMatch) return pathMatch[1];

    // Opci√≥n 3: De un elemento con id="report-id"
    const reportIdElement = document.getElementById('report-id');
    if (reportIdElement) return reportIdElement.textContent?.trim() || null;

    return null;
  }
</script>